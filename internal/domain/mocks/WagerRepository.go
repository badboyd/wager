// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "wager/internal/domain"

	decimal "github.com/shopspring/decimal"

	mock "github.com/stretchr/testify/mock"
)

// WagerRepository is an autogenerated mock type for the WagerRepository type
type WagerRepository struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *WagerRepository) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, wager
func (_m *WagerRepository) Create(ctx context.Context, wager domain.Wager) (domain.Wager, error) {
	ret := _m.Called(ctx, wager)

	var r0 domain.Wager
	if rf, ok := ret.Get(0).(func(context.Context, domain.Wager) domain.Wager); ok {
		r0 = rf(ctx, wager)
	} else {
		r0 = ret.Get(0).(domain.Wager)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Wager) error); ok {
		r1 = rf(ctx, wager)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, wagerID, limit
func (_m *WagerRepository) Get(ctx context.Context, wagerID int, limit int) ([]domain.Wager, int, error) {
	ret := _m.Called(ctx, wagerID, limit)

	var r0 []domain.Wager
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []domain.Wager); ok {
		r0 = rf(ctx, wagerID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Wager)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, wagerID, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, wagerID, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Purchase provides a mock function with given fields: ctx, wagerID, buyingPrice
func (_m *WagerRepository) Purchase(ctx context.Context, wagerID int, buyingPrice decimal.Decimal) (domain.Purchase, error) {
	ret := _m.Called(ctx, wagerID, buyingPrice)

	var r0 domain.Purchase
	if rf, ok := ret.Get(0).(func(context.Context, int, decimal.Decimal) domain.Purchase); ok {
		r0 = rf(ctx, wagerID, buyingPrice)
	} else {
		r0 = ret.Get(0).(domain.Purchase)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, decimal.Decimal) error); ok {
		r1 = rf(ctx, wagerID, buyingPrice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
